/**I.Tr·∫Øc nghi·ªám(3 ƒëi·ªÉm)
C√¢u 1. Cho ƒëo·∫°n m√£ sau :
int a = 5;
int x = 2;
a += (x > 0 ? 1 : 0);
cout << a;
K·∫øt qu·∫£ in ra m√†n h√¨nh l√† g√¨ ?
‚óè A) 1
‚óè B) 2
‚óè C) 5
‚óè D) 6
 answer: D (v√¨ x=2>0 n√™n a = 5 + 1 = 6)
C√¢u 2. Cho h√†m sau :
void towerOfHanoi(int n, char from_rod, char to_rod, char
	aux_rod) {
	if (n == 1) {
		cout << "Move disk 1 from rod " << from_rod << " to rod
			" << to_rod << endl;
			return;
	}
	towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);
	cout << "Move disk " << n << " from rod " << from_rod << "
		to rod " << to_rod << endl;
		towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);
	1
}
S·ªë l∆∞·ª£ng b∆∞·ªõc c·∫ßn thi·∫øt ƒë·ªÉ chuy·ªÉn 3 ƒëƒ©a t·ª´ A sang C l√† bao nhi√™u ?
‚óè A) 3
‚óè B) 5
‚óè C) 7
‚óè D) 9
 answer: B (v√¨ n=3 th√¨ s·ªë b∆∞·ªõc c·∫ßn thi·∫øt l√†  2^3 - 1 = 8 - 1 = 7)
C√¢u 3. Cho h√†m sau :
void printArray(int arr[], int size) {
	for (int i = 0; i < size; i++)
		cout << arr[i] << " ";
}
Khi g·ªçi printArray(arr, 5) v·ªõi arr l√† { 1, 2, 3, 4, 6 }, k·∫øt qu·∫£ s·∫Ω l√† g√¨ ?
‚óè A) 1 2 3 4 5
‚óè B) 5 4 3 2 1
‚óè C) 1 2 3 4
‚óè D) 2 3 4 5
 answer: C 
C√¢u 4.
Gi·∫£ s·ª≠ c√≥ m·ªôt m·∫£ng arr = { 5, 1, 4, 2, 8 }. B·∫°n ƒë∆∞·ª£c y√™u c·∫ßu s·∫Øp x·∫øp m·∫£ng tƒÉng
d·∫ßn b·∫±ng ph∆∞∆°ng ph√°p n·ªïi b·ªçt, sau l·∫ßn s·∫Øp x·∫øp ƒë·∫ßu ti√™n, m·∫£ng s·∫Ω tr√¥ng nh∆∞ th·∫ø n√†o ?
‚óè A) {1, 2, 4, 5, 8}
‚óè B) {5, 1, 4, 2, 8}
‚óè C) {1, 4, 2, 5, 8}
‚óè D) {1, 5, 4, 2, 8}
 answer: C 
C√¢u 5.
ƒêi·ªÅu ki·ªán c·ªßa v√≤ng l·∫∑p n√†o sau ƒë√¢y s·∫Ω l√†m v√≤ng l·∫∑p ch·∫°y v√¥ h·∫°n ?
x = -1;
while (condition) {
	// code
}
‚óè A) condition = true
‚óè B) condition = false
2
‚óè C) condition = (x > 0)
‚óè D) condition = (x == 10)
 answer: A (v√¨ x=-1 n√™n x>0 l√† false)
C√¢u 6. Cho h√†m sau :
int factorial(int n) {
	if (n <= 1)
		return 1;
	else
		return n * factorial(n - 1);
}
Gi√° tr·ªã c·ªßa factorial(4) l√† bao nhi√™u ?
‚óè A) 4
‚óè B) 12
‚óè C) 24
‚óè D) 16
 answer: C (v√¨ 4!=24)
C√¢u 7.
H√†m t√¨m ki·∫øm nh·ªã ph√¢n tr·∫£ l·∫°i v·ªã tr√≠ c·ªßa key trong m·∫£ng ho·∫∑c tr·∫£ v·ªÅ - 1. Gi·∫£ s·ª≠ c√≥ m·ªôt
m·∫£ng ƒë√£ s·∫Øp x·∫øp arr = { 1, 3, 5, 7, 9 }. Ch√∫ng ta c·∫ßn t√¨m ki·∫øm gi√° tr·ªã 2. Gi√° tr·ªã tr·∫£
v·ªÅ c·ªßa h√†m t√¨m ki·∫øm nh·ªã ph√¢n l√† g√¨ ?
‚óè A) 1
‚óè B) 0
‚óè C) - 1
‚óè D) 2
 answer: C (v√¨ 2 kh√¥ng c√≥ trong m·∫£ng n√™n tr·∫£ v·ªÅ -1)
C√¢u 8. Cho h√†m sau :
void changeValue(int& x) {
	x = 10;
}
N·∫øu g·ªçi h√†m changeValue(a) v·ªõi a l√† 5, gi√° tr·ªã c·ªßa a sau khi g·ªçi h√†m s·∫Ω l√† bao nhi√™u ?
3
‚óè A) 5
‚óè B) 10
‚óè C) Kh√¥ng x√°c ƒë·ªãnh
‚óè D) L·ªói bi√™n d·ªãch
 answer: B (v√¨ tham chi·∫øu ƒë·∫øn a n√™n a=10)
C√¢u 9.
void incrementByValue(int x) {
	x++;
}
void incrementByReference(int& x) {
	x++;
}
N·∫øu g·ªçi h√†m incrementByValue(a) v√† incrementByReference(b) v·ªõi a v√† b ƒë·ªÅu
l√† 5, gi√° tr·ªã c·ªßa a v√† b sau khi g·ªçi h√†m s·∫Ω l·∫ßn l∆∞·ª£t l√† bao nhi√™u ?
‚óè A) 5, 5
‚óè B) 6, 6
‚óè C) 5, 6
‚óè D) 6, 5
 answer: C 
C√¢u 10.
int fibonacci(int n) {
	if (n <= 1)
		return n;
	else
		return fibonacci(n - 1) + fibonacci(n - 2);
}
Gi√° tr·ªã c·ªßa fibonacci(6) l√† bao nhi√™u ?
‚óè A) 5
‚óè B) 8
‚óè C) 13
‚óè D) 21 answer: B (v√¨ fibonacci(6) = fibonacci(5) + fibonacci(4) = 5 + 3 = 8) **/ /**C√¢u 1 
 * 
Cho m·ªôt m·∫£ng N s·ªë nguy√™n v√† m·ªôt s·ªë nguy√™n K. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t√¨m t·∫•t c·∫£ c√°c c·∫∑p ph·∫ßn t·ª≠
trong m·∫£ng c√≥ t·ªïng b·∫±ng K.
ƒê·∫ßu v√†o:
D√≤ng ƒë√¢u ti√™n ch·ª©a s·ªë N l√† ƒë·ªô d√†i c·ªßa d√£y;
D√≤ng ti·∫øp theo ch·ª©a N s·ªë nguy√™n
D√≤ng cu·ªëi c√πng ch·ª©a s·ªë ùêæ ‚â§ 10


#include <iostream>
using namespace std;

int main() {
	int n, k;
	cin >> n >> k;

	int* a = new int[n];  

	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			if (a[i] + a[j] == k) {
				cout << a[i] << " " << a[j] << endl;
			}
		}
	}

	delete[] a; 
	return 0;


}

C√¢u 3 
Vi√™ÃÅt laÃ£i thu·∫°ÃÇt toaÃÅn bubble sort, n√™u ∆∞u v√† nh∆∞·ª£c ƒëi·ªÉm c·ªßa thu·∫≠t to√°n n√†y v·ªõi c√°c thu·∫≠t to√°n
selection sort v√† insertion sort

void bubbleSort(int arr[], int n) {
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				swap(arr[j], arr[j + 1]);
			}
		}
	}
}

∆Øu ƒëi·ªÉm so selection sort v√† insertion sort l√†
-bubble sort d·ªÖ hi·ªÉu v√† c√†i ƒë·∫∑t, d·ªÖ s·ª≠ d·ª•ng, d·ªÖ debug
-bubble sort ·ªïn ƒë·ªãnh, kh√¥ng l√†m thay ƒë·ªïi v·ªã tr√≠ c·ªßa c√°c ph·∫ßn t·ª≠ c√≥ c√πng gi√° tr·ªã
-bubble sort c√≥ th·ªÉ s·∫Øp x·∫øp m·∫£ng theo th·ª© t·ª± gi·∫£m d·∫ßn b·∫±ng c√°ch thay ƒë·ªïi d·∫•u so s√°nh

Nh∆∞·ª£c ƒëi·ªÉm so v·ªõi selection sort v√† insertion sort l√†
-bubble sort kh√¥ng hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu ƒë√£ s·∫Øp x·∫øp
-bubble sort kh√¥ng hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu l·ªõn
-bubble sort kh√¥ng hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu c√≥ ph√¢n ph·ªëi kh√¥ng ƒë·ªìng ƒë·ªÅu
-bubble sort kh√¥ng hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu c√≥ ph·∫ßn t·ª≠ tr√πng l·∫∑p
-bubble sort kh√¥ng hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu c√≥ ph·∫ßn t·ª≠ l·ªõn



C√¢u 4 
Tr√¨nh b√†y thu·∫≠t to√°n t√¨m ki·∫øm nh·ªã ph√¢n b·∫±ng ƒë·ªá quy
int binarySearch(int arr[], int l, int r, int x) {
	if (r >= l) {
		int mid = l + (r - l) / 2;
		if (arr[mid] == x) {
			return mid;
		}
		if (arr[mid] > x) {
			return binarySearch(arr, l, mid - 1, x);
		}
		return binarySearch(arr, mid + 1, r, x);
	}
	return -1;
}

**/

